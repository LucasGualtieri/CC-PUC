int tamanhoTotal = 16GB;
int metade = Metade de tamanhoTotal; // Destino da intercalação
int M;
int SegmentoOrdenado = 4; Exemplo, teria que ser multiplicado a cada vez por M

// Como aplicar a seguinte ideia? Considerando que tenho que usar parte do espaço disponivel para as filas e a "soma dos espacos das filas" (sera que ta certo isso?) para o destino das intercalações
// 25% 25% 50%?
// ou 1/4 1/4 1/4 1/4 Destino(4 * 1/4)

FilaCircular<registro>[] caminhos = new FilaCircular<registro>[M](SegmentoOrdenado);

Ideia de ter uma função que percorre as "cabeças" das fila circulares e retorna a menor cabeças

// Essa alternativa aqui foi pensada para segmentos de tamanho variavel
int atender() {
    static int maior até então; // poderia ser uma variavel da classe de ordenacao


	for () {
		if (array[i] > maior ate entao && array[i] < menor) menor = menor
		// Essa comparação vai ser feita atraves do comparable?
	}

	return (maior ate entao = resultdo);

	retornar -1 se intercalação tiver terminado?
}

// Essa alternativa aqui foi pensada para segmentos de tamanho fixo
int atender() {
    static int maior até então; // poderia ser uma variavel da classe de ordenacao


	for () {
		if (array[i] < menor) menor = menor
		// Essa comparação vai ser feita atraves do comparable?
	}

	return qual fila esta o menor
}

class Ordenação {
	void Distribuição() {
		// Números de Acessos a disco (NRegistros / SegmentoOrdenado) * 2
		arrayDeArquivosDestino[M];
		while(!file.EOF()) {
			arrayDeRegistros[SegmentoOrdenado];
			for (int i = 0; !file.EOF() && i < M; i++) {
				1 lê do arquivoOriginal // que nesse momento será aberto para leitura (uma vez) até o fim da distribuição
				2 ordenar
				3 escreve no arquivo arrayDeArquivosDestino[i];
			}
		}
	}

	// Essa alternativa aqui foi pensada para segmentos de tamanho fixo
	void Intercalação(int B // Vai dobrar de tamanho) {

		// Abro os M arquivos destino
		arrayDeArquivosEntrada[M];

		// e jogo em cada uma das filas para começar a intercalação

		arrayDeFilas[] = new Fila[M];
		Arrays.fill(arrayDeFilas, new Fila(B));

		int númeroDeBlocos = (Math.roundUp((float)N / B));
		int númeroDeIntercalações = númeroDeBlocos / M;

		for (int i = 0; i < númeroDeIntercalações; i++) {
			array ArrayDestino[] = new array[B * M];

			for (int j = 0; j < M; j++) {
				arrayDeFilasDestino[j].PegarOsBPrimeiros(arrayDeArquivosEntrada[j]);
			}
	
			for (int j = 0; j < B * M; j++) {
				int fila = min(arrayDeFilas); // Retorna a fila cuja a cabeça é a menor
				registro = arrayDeFilas[fila]."atender"();
				ArrayDestino.push(registro);
			}

			arrayDeArquivosEntrada[i % M].Receber(ArrayDestino);
		}
	}

	void NPassadas/Intercações() {
		int B = this.B;
		for (...) {
			Intercalação(B);
			B *= 2;
		}
	}
	
	// Essa alternativa aqui foi pensada para segmentos de tamanho variavel
	void Intercalação() {}

	Esses são apenas pseudo códigos muito pouco pensados, na prática isso
	vai dar mais trabalho, mais coisas terão que ser levadas em consideração
	pra que esse código consiga ser genérico e ainda mais dificil que ele
	consiga trabalhar com registros de tamanho varíavel para todos os possíveis
	tamanhos de RAM e que consiga implementar o Heap.

}